{"version":3,"sources":["QRCodeCanvas.js","DowloadButton.js","App.js","reportWebVitals.js","index.js"],"names":["QRCodeCanvas","_ref","text","canvasRef","useRef","useEffect","QRCode","toCanvas","current","error","console","log","React","createElement","id","className","ref","QrCodeDownloadButton","App","_useState","useState","_useState2","_slicedToArray","setText","_useState3","_useState4","text2","setText2","_useState5","_useState6","text3","setText3","divRef","jsondata","document","getElementById","nome","idade","email","autocomplete","onChange","element","target","value","type","JSON","stringify","onClick","htmlToImage","then","dataUrl","link","download","href","click","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"sRAIe,SAASA,EAAYC,GAAQ,IAANC,EAAID,EAAJC,KAE5BC,EAAYC,mBAQlB,OANAC,oBAAU,WACNC,IAAOC,SAASJ,EAAUK,QAASN,EAAM,SAACO,GACxCC,QAAQC,IAAIF,MAEb,CAACP,IAIFU,IAAAC,cAAA,OAAKC,GAAG,OAAOC,UAAU,aACrBH,IAAAC,cAAA,MAAIC,GAAG,MAAMC,UAAU,WAAU,sCACjCH,IAAAC,cAAA,SAAG,oDACHD,IAAAC,cAAA,UAAQG,IAAKb,EAAWW,GAAG,WAC3BF,IAAAC,cAAA,SAAG,4CCSAI,WCwBAC,MA7Cf,WACE,IAAyDC,EACjCC,mBAAS,QAAOC,EAAAC,YAAAH,EAAA,GAAjCjB,EAAImB,EAAA,GAAEE,EAAOF,EAAA,GAAAG,EACMJ,mBAAS,IAAGK,EAAAH,YAAAE,EAAA,GAA/BE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAAAG,EACIR,mBAAS,IAAGS,EAAAP,YAAAM,EAAA,GAA/BE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAGhBG,EAAS5B,iBAAO,MAahB6B,GAZUC,SAASC,eAAe,SAYvB,CACfC,KAAMlC,EACNmC,MAAOX,EACPY,MAAOR,IAET,OACElB,IAAAC,cAAA,OAAKE,UAAU,OACbH,IAAAC,cAAA,aAAO,UACPD,IAAAC,cAAA,SAAO0B,aAAa,OAAOC,SAAU,SAACC,GAAclB,EAAQkB,EAAQC,OAAOC,QAASA,MAAOzC,IAAcU,IAAAC,cAAA,WACzGD,IAAAC,cAAA,aAAO,WACPD,IAAAC,cAAA,SAAO+B,KAAK,SAASJ,SAAU,SAACC,GAAcd,EAASc,EAAQC,OAAOC,QAASA,MAAOjB,IAAed,IAAAC,cAAA,WACrGD,IAAAC,cAAA,aAAO,YACPD,IAAAC,cAAA,SAAO0B,aAAa,OAAOK,KAAK,OAAOJ,SAAU,SAACC,GAAcV,EAASU,EAAQC,OAAOC,QAASA,MAAOb,IAIxGlB,IAAAC,cAAA,WACAD,IAAAC,cAAA,OAAKG,IAAKgB,GAAQpB,IAAAC,cAACb,EAAY,CAACc,GAAG,QAAQZ,KApC9B,yCAoCgD2C,KAAKC,UAAUb,MAC1ErB,IAAAC,cAAA,UAAQkC,QA5Bc,WAC5BC,IAAkBhB,EAAOxB,SAASyC,KAAK,SAACC,GACpC,IAAMC,EAAOjB,SAASrB,cAAc,KACpCsC,EAAKC,SAAW,YAChBD,EAAKE,KAAOH,EACZC,EAAKG,YAuBmC,oBClC/BC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAV,KAAAS,EAAAE,KAAA,UAAqBX,KAAK,SAAAhD,GAAiD,IAA9C4D,EAAM5D,EAAN4D,OAAQC,EAAM7D,EAAN6D,OAAQC,EAAM9D,EAAN8D,OAAQC,EAAM/D,EAAN+D,OAAQC,EAAOhE,EAAPgE,QAC3DJ,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAQT,MCDDU,IAASC,WAAWjC,SAASC,eAAe,SACpDiC,OACHxD,IAAAC,cAACD,IAAMyD,WAAU,KACfzD,IAAAC,cAACK,EAAG,QAORqC","file":"static/js/main.ba7c0acc.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react'\r\nimport QRCode from 'qrcode'\r\nimport './style.css'\r\n\r\nexport default function QRCodeCanvas({text}){\r\n\r\n    const canvasRef = useRef()\r\n\r\n    useEffect(() =>{\r\n        QRCode.toCanvas(canvasRef.current, text, (error) => {\r\n          console.log(error)\r\n        })\r\n      }, [text])\r\n\r\n    return (\r\n        \r\n        <div id='test' className='container'>\r\n            <h2 id='h2t' className='h2style'>VocÃª e nosso convidado Especial</h2>\r\n            <p>No dia tal na hora tal o bagulho vai ficar doido</p>\r\n            <canvas ref={canvasRef} id=\"canvas\"></canvas>\r\n            <p>Apresente esse convite na entrada</p>\r\n        </div>\r\n    )\r\n          \r\n}","import React from \"react\";\r\nimport QRCode from \"qrcode.react\";\r\n\r\nfunction QrCodeDownloadButton(props) {\r\n  const { value, filename } = props;\r\n\r\n  const handleDownload = () => {\r\n    // Get the QR code as a base64-encoded PNG image\r\n    const canvas = document.getElementById(\"canvas\");\r\n    const pngUrl = canvas.toDataURL(\"image/png\");\r\n\r\n    // Create a temporary link element to download the image\r\n    const downloadLink = document.createElement(\"a\");\r\n    downloadLink.href = pngUrl;\r\n    downloadLink.download = `${filename}.png`;\r\n\r\n    // Trigger the download\r\n    document.body.appendChild(downloadLink);\r\n    downloadLink.click();\r\n    document.body.removeChild(downloadLink);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={handleDownload}>Download QR Code</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QrCodeDownloadButton;","import React,{ useState, useRef } from 'react';\nimport './App.css';\nimport QRCodeCanvas from './QRCodeCanvas';\nimport QrCodeDownloadButton from './DowloadButton';\nimport DownloadImage from './DownloadDiv';\nimport * as htmlToImage from 'html-to-image';\nimport { toPng, toJpeg, toBlob, toPixelData, toSvg } from 'html-to-image';\n\nfunction App() {\n  const endereco = \"https://www.meusite.com/validar?dados=\"\n  const [text, setText] = useState(\"nome\") \n  const [text2, setText2] = useState(\"\")\n  const [text3, setText3] = useState(\"\")\n\n  \n  const divRef = useRef(null);\n  const divtest = document.getElementById(\"test2\");\n  \n  const handleDownloadImage = () => {\n  htmlToImage.toPng(divRef.current).then((dataUrl) => {\n      const link = document.createElement(\"a\");\n      link.download = \"image.png\";\n      link.href = dataUrl;\n      link.click();\n    });\n  };\n  \n  \n  const jsondata = {\n    nome: text,\n    idade: text2,\n    email: text3\n  }\n  return (\n    <div className=\"App\">\n      <label>Nome: </label>\n      <input autocomplete='none' onChange={(element) => { setText(element.target.value)}} value={text}></input><br></br>\n      <label>Idade: </label>\n      <input type='number' onChange={(element) => { setText2(element.target.value)}} value={text2}></input><br></br>\n      <label>E-mail: </label>\n      <input autocomplete='none' type='text' onChange={(element) => { setText3(element.target.value)}} value={text3}></input>\n      {/* <DownloadImage></DownloadImage>\n      <QRCodeCanvas id=\"test2\" text={ JSON.stringify('Nome: '+ text + ' Idade: ' + text2 + ' E-mail: ' + text3 ) }></QRCodeCanvas>\n      <QrCodeDownloadButton></QrCodeDownloadButton> */}\n      <div>\n      <div ref={divRef}><QRCodeCanvas id=\"test2\" text={ endereco + JSON.stringify(jsondata) }></QRCodeCanvas></div>\n        <button onClick={handleDownloadImage}>Baixar Imagem</button>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}